// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromBytes(<Bytes>value));
    }
  }

  get to(): Bytes | null {
    let value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes | null) {
    if (!value) {
      this.unset("to");
    } else {
      this.set("to", Value.fromBytes(<Bytes>value));
    }
  }

  get amount(): BigDecimal | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set amount(value: BigDecimal | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wallet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Wallet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Wallet", id.toString(), this);
    }
  }

  static load(id: string): Wallet | null {
    return changetype<Wallet | null>(store.get("Wallet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get sohmBalance(): BigInt | null {
    let value = this.get("sohmBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sohmBalance(value: BigInt | null) {
    if (!value) {
      this.unset("sohmBalance");
    } else {
      this.set("sohmBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get dailyBalance(): Array<string> {
    let value = this.get("dailyBalance");
    return value!.toStringArray();
  }

  set dailyBalance(value: Array<string>) {
    this.set("dailyBalance", Value.fromStringArray(value));
  }

  get birth(): BigInt | null {
    let value = this.get("birth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set birth(value: BigInt | null) {
    if (!value) {
      this.unset("birth");
    } else {
      this.set("birth", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class totalSupply extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalWallets", Value.fromBigInt(BigInt.zero()));
    this.set("sohmBalance", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save totalSupply entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save totalSupply entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("totalSupply", id.toString(), this);
    }
  }

  static load(id: string): totalSupply | null {
    return changetype<totalSupply | null>(store.get("totalSupply", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalWallets(): BigInt {
    let value = this.get("totalWallets");
    return value!.toBigInt();
  }

  set totalWallets(value: BigInt) {
    this.set("totalWallets", Value.fromBigInt(value));
  }

  get sohmBalance(): BigInt {
    let value = this.get("sohmBalance");
    return value!.toBigInt();
  }

  set sohmBalance(value: BigInt) {
    this.set("sohmBalance", Value.fromBigInt(value));
  }

  get day(): BigInt | null {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set day(value: BigInt | null) {
    if (!value) {
      this.unset("day");
    } else {
      this.set("day", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MinuteBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("sohmBalance", Value.fromBigInt(BigInt.zero()));
    this.set("hourBalance", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MinuteBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MinuteBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MinuteBalance", id.toString(), this);
    }
  }

  static load(id: string): MinuteBalance | null {
    return changetype<MinuteBalance | null>(store.get("MinuteBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sohmBalance(): BigInt {
    let value = this.get("sohmBalance");
    return value!.toBigInt();
  }

  set sohmBalance(value: BigInt) {
    this.set("sohmBalance", Value.fromBigInt(value));
  }

  get hourBalance(): string {
    let value = this.get("hourBalance");
    return value!.toString();
  }

  set hourBalance(value: string) {
    this.set("hourBalance", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get minute(): BigInt | null {
    let value = this.get("minute");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minute(value: BigInt | null) {
    if (!value) {
      this.unset("minute");
    } else {
      this.set("minute", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class HourBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dailyBalance", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save HourBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save HourBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("HourBalance", id.toString(), this);
    }
  }

  static load(id: string): HourBalance | null {
    return changetype<HourBalance | null>(store.get("HourBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sohmBalance(): BigInt | null {
    let value = this.get("sohmBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sohmBalance(value: BigInt | null) {
    if (!value) {
      this.unset("sohmBalance");
    } else {
      this.set("sohmBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get minuteBalance(): Array<string> | null {
    let value = this.get("minuteBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set minuteBalance(value: Array<string> | null) {
    if (!value) {
      this.unset("minuteBalance");
    } else {
      this.set("minuteBalance", Value.fromStringArray(<Array<string>>value));
    }
  }

  get dailyBalance(): string {
    let value = this.get("dailyBalance");
    return value!.toString();
  }

  set dailyBalance(value: string) {
    this.set("dailyBalance", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get hour(): BigInt | null {
    let value = this.get("hour");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set hour(value: BigInt | null) {
    if (!value) {
      this.unset("hour");
    } else {
      this.set("hour", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LogRebase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogRebase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogRebase entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogRebase", id.toString(), this);
    }
  }

  static load(id: string): LogRebase | null {
    return changetype<LogRebase | null>(store.get("LogRebase", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get epoch(): BigInt | null {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt | null) {
    if (!value) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromBigInt(<BigInt>value));
    }
  }

  get rebase(): BigInt | null {
    let value = this.get("rebase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rebase(value: BigInt | null) {
    if (!value) {
      this.unset("rebase");
    } else {
      this.set("rebase", Value.fromBigInt(<BigInt>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LogRebaseDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogRebaseDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogRebaseDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogRebaseDaily", id.toString(), this);
    }
  }

  static load(id: string): LogRebaseDaily | null {
    return changetype<LogRebaseDaily | null>(store.get("LogRebaseDaily", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get epoch(): BigInt | null {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt | null) {
    if (!value) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromBigInt(<BigInt>value));
    }
  }

  get rebase(): BigInt | null {
    let value = this.get("rebase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rebase(value: BigInt | null) {
    if (!value) {
      this.unset("rebase");
    } else {
      this.set("rebase", Value.fromBigInt(<BigInt>value));
    }
  }

  get hours(): Array<string> | null {
    let value = this.get("hours");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hours(value: Array<string> | null) {
    if (!value) {
      this.unset("hours");
    } else {
      this.set("hours", Value.fromStringArray(<Array<string>>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LogRebaseHourly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("logRebaseDaily", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogRebaseHourly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogRebaseHourly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogRebaseHourly", id.toString(), this);
    }
  }

  static load(id: string): LogRebaseHourly | null {
    return changetype<LogRebaseHourly | null>(store.get("LogRebaseHourly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get epoch(): BigInt | null {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt | null) {
    if (!value) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromBigInt(<BigInt>value));
    }
  }

  get rebase(): BigInt | null {
    let value = this.get("rebase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rebase(value: BigInt | null) {
    if (!value) {
      this.unset("rebase");
    } else {
      this.set("rebase", Value.fromBigInt(<BigInt>value));
    }
  }

  get logRebaseDaily(): string {
    let value = this.get("logRebaseDaily");
    return value!.toString();
  }

  set logRebaseDaily(value: string) {
    this.set("logRebaseDaily", Value.fromString(value));
  }

  get minutes(): Array<string> | null {
    let value = this.get("minutes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set minutes(value: Array<string> | null) {
    if (!value) {
      this.unset("minutes");
    } else {
      this.set("minutes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class LogRebaseMinute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("logRebaseHourly", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LogRebaseMinute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LogRebaseMinute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LogRebaseMinute", id.toString(), this);
    }
  }

  static load(id: string): LogRebaseMinute | null {
    return changetype<LogRebaseMinute | null>(store.get("LogRebaseMinute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get epoch(): BigInt | null {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt | null) {
    if (!value) {
      this.unset("epoch");
    } else {
      this.set("epoch", Value.fromBigInt(<BigInt>value));
    }
  }

  get rebase(): BigInt | null {
    let value = this.get("rebase");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set rebase(value: BigInt | null) {
    if (!value) {
      this.unset("rebase");
    } else {
      this.set("rebase", Value.fromBigInt(<BigInt>value));
    }
  }

  get logRebaseHourly(): string {
    let value = this.get("logRebaseHourly");
    return value!.toString();
  }

  set logRebaseHourly(value: string) {
    this.set("logRebaseHourly", Value.fromString(value));
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("wallet", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DailyBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DailyBalance", id.toString(), this);
    }
  }

  static load(id: string): DailyBalance | null {
    return changetype<DailyBalance | null>(store.get("DailyBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sohmBalance(): BigInt | null {
    let value = this.get("sohmBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sohmBalance(value: BigInt | null) {
    if (!value) {
      this.unset("sohmBalance");
    } else {
      this.set("sohmBalance", Value.fromBigInt(<BigInt>value));
    }
  }

  get hourBalance(): Array<string> | null {
    let value = this.get("hourBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hourBalance(value: Array<string> | null) {
    if (!value) {
      this.unset("hourBalance");
    } else {
      this.set("hourBalance", Value.fromStringArray(<Array<string>>value));
    }
  }

  get wallet(): string {
    let value = this.get("wallet");
    return value!.toString();
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get day(): BigInt | null {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set day(value: BigInt | null) {
    if (!value) {
      this.unset("day");
    } else {
      this.set("day", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class SohmiesDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("holders", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SohmiesDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SohmiesDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SohmiesDaily", id.toString(), this);
    }
  }

  static load(id: string): SohmiesDaily | null {
    return changetype<SohmiesDaily | null>(store.get("SohmiesDaily", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get holders(): BigInt {
    let value = this.get("holders");
    return value!.toBigInt();
  }

  set holders(value: BigInt) {
    this.set("holders", Value.fromBigInt(value));
  }

  get hours(): Array<string> | null {
    let value = this.get("hours");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hours(value: Array<string> | null) {
    if (!value) {
      this.unset("hours");
    } else {
      this.set("hours", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class SohmiesHourly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("holders", Value.fromBigInt(BigInt.zero()));
    this.set("sohmiesDaily", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SohmiesHourly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SohmiesHourly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SohmiesHourly", id.toString(), this);
    }
  }

  static load(id: string): SohmiesHourly | null {
    return changetype<SohmiesHourly | null>(store.get("SohmiesHourly", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get holders(): BigInt {
    let value = this.get("holders");
    return value!.toBigInt();
  }

  set holders(value: BigInt) {
    this.set("holders", Value.fromBigInt(value));
  }

  get sohmiesDaily(): string {
    let value = this.get("sohmiesDaily");
    return value!.toString();
  }

  set sohmiesDaily(value: string) {
    this.set("sohmiesDaily", Value.fromString(value));
  }

  get minutes(): Array<string> | null {
    let value = this.get("minutes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set minutes(value: Array<string> | null) {
    if (!value) {
      this.unset("minutes");
    } else {
      this.set("minutes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class SohmiesMinutely extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("holders", Value.fromBigInt(BigInt.zero()));
    this.set("sohmiesHourly", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SohmiesMinutely entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SohmiesMinutely entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SohmiesMinutely", id.toString(), this);
    }
  }

  static load(id: string): SohmiesMinutely | null {
    return changetype<SohmiesMinutely | null>(store.get("SohmiesMinutely", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get holders(): BigInt {
    let value = this.get("holders");
    return value!.toBigInt();
  }

  set holders(value: BigInt) {
    this.set("holders", Value.fromBigInt(value));
  }

  get sohmiesHourly(): string {
    let value = this.get("sohmiesHourly");
    return value!.toString();
  }

  set sohmiesHourly(value: string) {
    this.set("sohmiesHourly", Value.fromString(value));
  }
}
