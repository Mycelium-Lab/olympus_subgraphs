// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class totalSupplyDaily extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalWallets", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupplyUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("circulatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalanceUsd", Value.fromBigDecimal(BigDecimal.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save totalSupplyDaily entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save totalSupplyDaily entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("totalSupplyDaily", id.toString(), this);
    }
  }

  static load(id: string): totalSupplyDaily | null {
    return changetype<totalSupplyDaily | null>(
      store.get("totalSupplyDaily", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalWallets(): BigInt {
    let value = this.get("totalWallets");
    return value!.toBigInt();
  }

  set totalWallets(value: BigInt) {
    this.set("totalWallets", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get totalSupplyUsd(): BigDecimal {
    let value = this.get("totalSupplyUsd");
    return value!.toBigDecimal();
  }

  set totalSupplyUsd(value: BigDecimal) {
    this.set("totalSupplyUsd", Value.fromBigDecimal(value));
  }

  get circulatingSupply(): BigDecimal {
    let value = this.get("circulatingSupply");
    return value!.toBigDecimal();
  }

  set circulatingSupply(value: BigDecimal) {
    this.set("circulatingSupply", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get daoBalance(): BigDecimal {
    let value = this.get("daoBalance");
    return value!.toBigDecimal();
  }

  set daoBalance(value: BigDecimal) {
    this.set("daoBalance", Value.fromBigDecimal(value));
  }

  get daoBalanceUsd(): BigDecimal {
    let value = this.get("daoBalanceUsd");
    return value!.toBigDecimal();
  }

  set daoBalanceUsd(value: BigDecimal) {
    this.set("daoBalanceUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get hours(): Array<string> | null {
    let value = this.get("hours");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hours(value: Array<string> | null) {
    if (!value) {
      this.unset("hours");
    } else {
      this.set("hours", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class totalSupplyHourly extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalWallets", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupplyUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("circulatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalanceUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupplyDaily", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save totalSupplyHourly entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save totalSupplyHourly entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("totalSupplyHourly", id.toString(), this);
    }
  }

  static load(id: string): totalSupplyHourly | null {
    return changetype<totalSupplyHourly | null>(
      store.get("totalSupplyHourly", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalWallets(): BigInt {
    let value = this.get("totalWallets");
    return value!.toBigInt();
  }

  set totalWallets(value: BigInt) {
    this.set("totalWallets", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get totalSupplyUsd(): BigDecimal {
    let value = this.get("totalSupplyUsd");
    return value!.toBigDecimal();
  }

  set totalSupplyUsd(value: BigDecimal) {
    this.set("totalSupplyUsd", Value.fromBigDecimal(value));
  }

  get circulatingSupply(): BigDecimal {
    let value = this.get("circulatingSupply");
    return value!.toBigDecimal();
  }

  set circulatingSupply(value: BigDecimal) {
    this.set("circulatingSupply", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get daoBalance(): BigDecimal {
    let value = this.get("daoBalance");
    return value!.toBigDecimal();
  }

  set daoBalance(value: BigDecimal) {
    this.set("daoBalance", Value.fromBigDecimal(value));
  }

  get daoBalanceUsd(): BigDecimal {
    let value = this.get("daoBalanceUsd");
    return value!.toBigDecimal();
  }

  set daoBalanceUsd(value: BigDecimal) {
    this.set("daoBalanceUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalSupplyDaily(): string {
    let value = this.get("totalSupplyDaily");
    return value!.toString();
  }

  set totalSupplyDaily(value: string) {
    this.set("totalSupplyDaily", Value.fromString(value));
  }

  get minutes(): Array<string> | null {
    let value = this.get("minutes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set minutes(value: Array<string> | null) {
    if (!value) {
      this.unset("minutes");
    } else {
      this.set("minutes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class totalSupplyMinutely extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("totalWallets", Value.fromBigInt(BigInt.zero()));
    this.set("totalSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupplyUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("circulatingSupply", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("marketCap", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalance", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("daoBalanceUsd", Value.fromBigDecimal(BigDecimal.zero()));
    this.set("totalSupplyHourly", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save totalSupplyMinutely entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save totalSupplyMinutely entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("totalSupplyMinutely", id.toString(), this);
    }
  }

  static load(id: string): totalSupplyMinutely | null {
    return changetype<totalSupplyMinutely | null>(
      store.get("totalSupplyMinutely", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalWallets(): BigInt {
    let value = this.get("totalWallets");
    return value!.toBigInt();
  }

  set totalWallets(value: BigInt) {
    this.set("totalWallets", Value.fromBigInt(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get totalSupplyUsd(): BigDecimal {
    let value = this.get("totalSupplyUsd");
    return value!.toBigDecimal();
  }

  set totalSupplyUsd(value: BigDecimal) {
    this.set("totalSupplyUsd", Value.fromBigDecimal(value));
  }

  get circulatingSupply(): BigDecimal {
    let value = this.get("circulatingSupply");
    return value!.toBigDecimal();
  }

  set circulatingSupply(value: BigDecimal) {
    this.set("circulatingSupply", Value.fromBigDecimal(value));
  }

  get marketCap(): BigDecimal {
    let value = this.get("marketCap");
    return value!.toBigDecimal();
  }

  set marketCap(value: BigDecimal) {
    this.set("marketCap", Value.fromBigDecimal(value));
  }

  get daoBalance(): BigDecimal {
    let value = this.get("daoBalance");
    return value!.toBigDecimal();
  }

  set daoBalance(value: BigDecimal) {
    this.set("daoBalance", Value.fromBigDecimal(value));
  }

  get daoBalanceUsd(): BigDecimal {
    let value = this.get("daoBalanceUsd");
    return value!.toBigDecimal();
  }

  set daoBalanceUsd(value: BigDecimal) {
    this.set("daoBalanceUsd", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalSupplyHourly(): string {
    let value = this.get("totalSupplyHourly");
    return value!.toString();
  }

  set totalSupplyHourly(value: string) {
    this.set("totalSupplyHourly", Value.fromString(value));
  }
}
