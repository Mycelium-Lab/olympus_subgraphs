type Transfer @entity {

  id: ID!
  from: Bytes
  to: Bytes
  amount: BigDecimal
  timestamp: BigInt

}

type Wallet @entity {
  id: ID!
  address: Bytes
  ohmBalance: BigInt
  sohmBalance: BigInt
  dailyBalance: [DailyBalance!]! @derivedFrom(field: "wallet")
  birth: BigInt
}

type Balance @entity {

  id: ID!
  address: String
  ohmBalance: BigInt
  sohmBalance: BigInt
  timestamp: BigInt
  wallet: Wallet!
  transfer: Transfer!

}

type Mint @entity {

  id: ID!
  address: Bytes
  value: BigDecimal
  timestamp: BigInt

}

type Burn @entity {

  id: ID!
  value: BigInt

}

type Minter @entity {

  id: ID!
  address: Bytes
  timestamp: BigInt

}

type OhmiesDaily @entity {

  id: ID!
  timestamp: BigInt!
  holders: BigInt!
  hours: [OhmiesHourly!] @derivedFrom(field: "ohmiesDaily")

}

type OhmiesHourly @entity {

  id: ID!
  timestamp: BigInt!
  holders: BigInt!
  ohmiesDaily: OhmiesDaily!
  minutes: [OhmiesMinutely!] @derivedFrom(field: "ohmiesHourly")

}

type OhmiesMinutely @entity {

  id: ID!
  timestamp: BigInt!
  holders: BigInt!
  ohmiesHourly: OhmiesHourly!

}

type MinuteBalance @entity {
  id: ID!
  ohmBalance: BigInt!
  hourBalance: HourBalance!
  timestamp: BigInt
  address: Bytes
  minute: BigInt
}

type HourBalance @entity {
  id: ID!
  ohmBalance: BigInt
  minuteBalance: [MinuteBalance!] @derivedFrom(field: "hourBalance")
  dailyBalance: DailyBalance!
  timestamp: BigInt
  address: Bytes
  hour: BigInt
}

type DailyBalance @entity {
  id: ID!
  ohmBalance: BigInt
  hourBalance: [HourBalance!] @derivedFrom(field: "dailyBalance")
  wallet: Wallet!
  timestamp: BigInt
  address: Bytes
  day: BigInt
}